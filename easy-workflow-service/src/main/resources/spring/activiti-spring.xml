<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
    ">

  <bean id="processEngineConfiguration" class="org.activiti.spring.SpringProcessEngineConfiguration">
    <property name="dataSource" ref="dataSourceBpm" />
    <property name="transactionManager" ref="transactionManagerBpm" />
    <!-- false：不能自动创建表，需要表存在，create-drop：先删除表再创建表，true：如果表不存在，自动创建表 -->
	<property name="databaseSchemaUpdate" value="true"/>
	<!-- 在流程引擎启动时关闭JobExecuto -->
	<property name="jobExecutorActivate" value="false" />
	<!-- 所有流程定义都被缓存了（解析之后）避免每次使用前都要访问数据库， 因为流程定义数据是不会改变的。 默认，不会限制这个缓存。 -->
	<property name="processDefinitionCacheLimit" value="10" />
	<!-- 
	none: 忽略所有历史存档。这是流程执行时性能最好的状态，但没有任何历史信息可用。
	activity: 保存所有流程实例信息和活动实例信息。 在流程实例结束时，最后一个流程实例中的最新的变量值将赋值给历史变量。 不会保存过程中的详细信息。
	audit: 这个是默认值。它保存所有流程实例信息，活动信息，保证所有的变量和提交的表单属性保持同步 这样所有用户交互信息都是可追溯的，可以用来审计。
	full: 这个是最高级别的历史信息存档，同样也是最慢的。 这个级别存储发生在审核以及所有其它细节的信息，主要是更新流程变量。
	 -->
	<property name="history" value="full" />
	
	<!-- 执行自定义SQL -->
	<property name="customMybatisMappers">
	  <set>
	    <value>com.yffd.easy.workflow.mapper.WfDefinitionMapper</value>
	    <value>com.yffd.easy.workflow.mapper.WfInstanceMapper</value>
	    <value>com.yffd.easy.workflow.mapper.WfTaskMapper</value>
	    <value>com.yffd.easy.workflow.mapper.WfTodoTaskMapper</value>
	    <value>com.yffd.easy.workflow.mapper.WfHistoryInstanceMapper</value>
	    <value>com.yffd.easy.workflow.mapper.WfHistoryTaskMapper</value>
	  </set>
	</property>
	<property name="customMybatisXMLMappers">
	  <set>
	    <value>mybatis/mapper/workflow/WfDefinitionMapper.xml</value>
	    <value>mybatis/mapper/workflow/WfInstanceMapper.xml</value>
	    <value>mybatis/mapper/workflow/WfTaskMapper.xml</value>
	    <value>mybatis/mapper/workflow/WfTodoTaskMapper.xml</value>
	    <value>mybatis/mapper/workflow/WfHistoryInstanceMapper.xml</value>
	    <value>mybatis/mapper/workflow/WfHistoryTaskMapper.xml</value>
	  </set>
	</property>

  </bean>

  <bean id="processEngine" class="org.activiti.spring.ProcessEngineFactoryBean">
    <property name="processEngineConfiguration" ref="processEngineConfiguration" />
  </bean>

  <!-- 7大接口 -->
  <bean id="repositoryService" factory-bean="processEngine" factory-method="getRepositoryService"/>
  <bean id="runtimeService" factory-bean="processEngine" factory-method="getRuntimeService"/>
  <bean id="formService" factory-bean="processEngine" factory-method="getFormService"/>
  <bean id="identityService" factory-bean="processEngine" factory-method="getIdentityService"/>
  <bean id="taskService" factory-bean="processEngine" factory-method="getTaskService"/>
  <bean id="historyService" factory-bean="processEngine" factory-method="getHistoryService"/>
  <bean id="managementService" factory-bean="processEngine" factory-method="getManagementService"/>

</beans>